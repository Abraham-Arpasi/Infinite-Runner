using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using UnityEngine;

public class Player : MonoBehaviour
{
    [Header("Knockback Info")]
    [SerializeField] private Vector2 knockbackDir;
    private bool isKnocked;
    private bool canBeKnocked = true;

    [Header("Movement info")]
    [SerializeField] private float moveSpeed;
    [SerializeField] private float jumpForce;
    [SerializeField] private float doubleJumpForce;

    private bool canDoubleJump;

    //private bool isRunning;
    //private bool runBegan;

    private Rigidbody2D rb;
    private Animator anim;
    private SpriteRenderer sr;

    private bool isDead;

    [Header("Speed Info")]
    [SerializeField] private float maxSpeed;
    [SerializeField] private float speedMultplier;
    private float defaultSpeed;
    [Space]
    [SerializeField] private float mileStoneIncreaser;
    private float defaultMileStoneIncrease;
    private float speedMileStone;

    private bool playerUnlocked;

    [Header("Collision info")]
    private bool isGrounded;
    private bool wallDetected;
    [SerializeField] private float groundCheckDistance;
    [SerializeField] private LayerMask whatIsGround;
    [SerializeField] private Transform wallCheck;
    [SerializeField] private Vector2 wallCheckSize;

    [SerializeField] public bool ledgeDetected;

    [Header("Ledge Info")]
    [SerializeField] private Vector2 Offset1;
    [SerializeField] private Vector2 Offset2;

    private Vector2 climbBegunPosition;
    private Vector2 climbOverPosition;

    private bool canGrabLedge = true;
    private bool canClimb;


    // Start is called before the first frame update
    void Start()
    {
       rb = GetComponent<Rigidbody2D>();
       anim = GetComponent<Animator>();
        sr = GetComponent<SpriteRenderer>();
        //so the character doesn't start of passing a milestone.
        speedMileStone = mileStoneIncreaser;
        defaultSpeed = moveSpeed;
        defaultMileStoneIncrease = mileStoneIncreaser;

    }

    // Update is called once per frame
    void Update()
    {
        CheckCollision();
        AnimatorControllers();

        if(Input.GetKeyDown(KeyCode.K) && !isDead)
            KnockBack();

        if (Input.GetKeyDown(KeyCode.O) && !isDead)
            StartCoroutine(Die());

        if (isDead)
            return;

        if (isKnocked)
            return;

        if (playerUnlocked && !wallDetected)
        {
            SetupMovement();

        }

        if (isGrounded)
            canDoubleJump = true;

        SpeedController();

        CheckForLedge();
        CheckInput();

    }

    public void Damage()
    {
        if (moveSpeed >= maxSpeed)
            KnockBack();
        else
            StartCoroutine(Die());
    }

    private IEnumerator Die()
    {
        isDead = true;
        canBeKnocked = false;
        rb.velocity = knockbackDir;
        anim.SetBool("isDead", true);

        yield return new WaitForSeconds(1);
        rb.velocity = new Vector2(0, 0);
    }

    private IEnumerator Invicibility()
    {
        Color originalColor = sr.color;
        Color darkenColor = new Color(sr.color.r, sr.color.g, sr.color.b, 0.7f);

        canBeKnocked = false;
        sr.color = darkenColor;
        yield return new WaitForSeconds(0.1f);

        sr.color = originalColor;
        yield return new WaitForSeconds(0.1f);

        sr.color = darkenColor;
        yield return new WaitForSeconds(0.15f);

        sr.color = originalColor;
        yield return new WaitForSeconds(0.15f);

        sr.color = darkenColor;
        yield return new WaitForSeconds(0.25f);

        sr.color = originalColor;
        yield return new WaitForSeconds(0.25f);

        sr.color = darkenColor;
        yield return new WaitForSeconds(0.3f);

        sr.color = originalColor;
        yield return new WaitForSeconds(0.3f);

        sr.color = darkenColor;
        yield return new WaitForSeconds(0.45f);

        sr.color = originalColor;
        yield return new WaitForSeconds(0.45f);

        sr.color = darkenColor;
        yield return new WaitForSeconds(0.45f);

        sr.color = originalColor;
        canBeKnocked = true;

    }

    private void KnockBack()
    {
        if (!canBeKnocked)
            return;

        StartCoroutine(Invicibility());
        isKnocked = true;
        rb.velocity = knockbackDir;

    }

    private void CancelKnockback()
    {
        isKnocked = false;  
    }

    private void SpeedReset()
    {
        //when speedReset function is called, speed is made default again.
        moveSpeed = defaultSpeed;
        mileStoneIncreaser = defaultMileStoneIncrease;
    }

    //this will increase the speed of the character based of the milestone it passes.
    private void SpeedController()
    {
        if (moveSpeed == maxSpeed)
            return;

        if(transform.position.x > speedMileStone)
        {
            speedMileStone = speedMileStone + mileStoneIncreaser;

            moveSpeed = moveSpeed * speedMultplier;
            mileStoneIncreaser = mileStoneIncreaser * speedMultplier;

            if(moveSpeed > maxSpeed)
                moveSpeed = maxSpeed;
        }
    }

    private void CheckForLedge()
    {
        if(ledgeDetected && canGrabLedge)
        {
            canGrabLedge = false;
            rb.gravityScale = 0;

            Vector2 ledgePosition = GetComponentInChildren<LedgeDetection>().transform.position;

            climbBegunPosition = ledgePosition + Offset1;
            climbOverPosition = ledgePosition + Offset2;

            canClimb = true;
        }

        if(canClimb)
            transform.position = climbBegunPosition;
    }
    private void LedgeClimbOver()
    {
        anim.SetBool("canRoll", false);
        canClimb = false;
        rb.gravityScale = 5;
        transform.position = climbOverPosition;
        //this adds a delay for the ledge climb.
        Invoke("AllowLedgeGrab", .1f);
    }
    private void AllowLedgeGrab() => canGrabLedge = true;

    private void SetupMovement()
    {
        //when the character hits a wall move speed goes back to default.
        if (wallDetected)
        {
            SpeedReset();
            return;
        }
        else
        rb.velocity = new Vector2(moveSpeed, rb.velocity.y);
    }

    private void AnimatorControllers()
    {
        anim.SetFloat("xVelocity", rb.velocity.x);
        anim.SetFloat("yVelocity", rb.velocity.y);

        anim.SetBool("canDoubleJump", canDoubleJump);
        anim.SetBool("isGrounded", isGrounded);
        anim.SetBool("canClimb", canClimb);
        anim.SetBool("isKnocked", isKnocked);

        if (rb.velocity.y < -15)
            anim.SetBool("canRoll", true);
    }

    private void RollAnimFinished()
    {
        anim.SetBool("canRoll", false);
    }

    private void CheckCollision()
    {
        isGrounded = Physics2D.Raycast(transform.position, Vector2.down, groundCheckDistance, whatIsGround);
        wallDetected = Physics2D.BoxCast(wallCheck.position, wallCheckSize, 0, Vector2.zero, 0, whatIsGround);

        //Debug.Log(ledgeDetected);
    }

    private void CheckInput()
    {
        if (Input.GetButtonDown("Fire2"))
        {
            playerUnlocked = true;
        }

        if (Input.GetButtonDown("Jump"))
        {
            JumpButton();
        }
    }

    private void JumpButton()
    {
        if (isGrounded)
        {
            rb.velocity = new Vector2(rb.velocity.x, jumpForce);
        }
        else if (canDoubleJump)
        {
            canDoubleJump = false;
            rb.velocity = new Vector2(rb.velocity.x, doubleJumpForce);
        }

    }

    private void OnDrawGizmos()
    {
        Gizmos.DrawLine(transform.position, new Vector2 (transform.position.x, transform.position.y - groundCheckDistance));
        Gizmos.DrawWireCube(wallCheck.position, wallCheckSize);
    }
}
