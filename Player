using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Player : MonoBehaviour
{
    [Header("Movement info")]
    [SerializeField] private float moveSpeed;
    [SerializeField] private float jumpForce;
    [SerializeField] private float doubleJumpForce;
    private float defaultJumpForce;
    private bool canDoubleJump;

    //private bool isRunning;
    //private bool runBegan;

    private Rigidbody2D rb;
    private Animator anim;

    private bool playerUnlocked;

    [Header("Collision info")]
    private bool isGrounded;
    [SerializeField] public float groundCheckDistance;
    [SerializeField] public LayerMask whatIsGround;


    // Start is called before the first frame update
    void Start()
    {
       rb = GetComponent<Rigidbody2D>();
        anim = GetComponent<Animator>();

        defaultJumpForce = jumpForce;
    }

    // Update is called once per frame
    void Update()
    {
        AnimatorControllers();

        if (playerUnlocked)
        {
            rb.velocity = new Vector2(moveSpeed, rb.velocity.y);

        }

        CheckCollision();

        CheckInput();

    }

    private void AnimatorControllers()
    {
        anim.SetBool("canDoubleJump", canDoubleJump);
        anim.SetBool("isGrounded", isGrounded);
        anim.SetFloat("xVelocity", rb.velocity.x);
        anim.SetFloat("yVelocity", rb.velocity.y);
    }

    private void CheckCollision()
    {
        isGrounded = Physics2D.Raycast(transform.position, Vector2.down, groundCheckDistance, whatIsGround);
    }

    private void CheckInput()
    {
        if (Input.GetButtonDown("Fire2"))
        {
            playerUnlocked = true;
        }

        if (Input.GetButtonDown("Jump"))
        {
            JumpButton();
        }
    }

    private void JumpButton()
    {
        if (isGrounded)
        {
            jumpForce = defaultJumpForce;
            canDoubleJump = true;
            rb.velocity = new Vector2(rb.velocity.x, jumpForce);
        }
        else if (canDoubleJump)
        {
            jumpForce = doubleJumpForce;
            canDoubleJump = false;
            rb.velocity = new Vector2(rb.velocity.x, jumpForce);
        }

    }

    private void OnDrawGizmos()
    {
        Gizmos.DrawLine(transform.position, new Vector2 (transform.position.x, transform.position.y - groundCheckDistance));
    }
}
